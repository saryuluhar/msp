{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/background-geolocation/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport enum BackgroundGeolocationLocationCode {\n  PERMISSION_DENIED = 1,\n  LOCATION_UNAVAILABLE = 2,\n  TIMEOUT = 3\n}\n\nexport enum BackgroundGeolocationNativeProvider {\n  gps = 'gps',\n  network = 'network',\n  passive = 'passive',\n  fused = 'fused'\n}\n\nexport enum BackgroundGeolocationLocationProvider {\n  DISTANCE_FILTER_PROVIDER = 0,\n  ACTIVITY_PROVIDER = 1,\n  RAW_PROVIDER = 2\n}\n\nexport enum BackgroundGeolocationEvents {\n  http_authorization = 'http_authorization', // Triggered when server responded with \"<code>401 Unauthorized</code>\" to post/sync request.\n  abort_requested = 'abort_requested', // Triggered when server responded with \"<code>285 Updates Not Required</code>\" to post/sync request.\n  background = 'background', // Triggered when app entered background state and (not visible to the user).\n  foreground = 'foreground', // Triggered when app entered foreground state and (visible to the user).\n  authorization = 'authorization', // Triggered when user changes authorization/permissions for the app or toggles location services.\n  error = 'error', // Register error listener.\n  stop = 'stop', // Triggered when background service has been stopped succesfully.\n  start = 'start', // Event is triggered when background service has been started succesfully.\n  activity = 'activity', // Register activity monitoring listener.\n  stationary = 'stationary', // Register stationary location event listener.\n  location = 'location' // Register location event listener.\n}\n\nexport enum BackgroundGeolocationAuthorizationStatus {\n  NOT_AUTHORIZED = 0,\n  AUTHORIZED = 1,\n  AUTHORIZED_FOREGROUND = 2\n}\n\nexport enum BackgroundGeolocationLogLevel {\n  TRACE = 'TRACE',\n  DEBUG = 'DEBUG',\n  INFO = 'INFO',\n  WARN = 'WARN',\n  ERROR = 'ERROR'\n}\n\nexport interface BackgroundGeolocationLogEntry {\n  /** ID of log entry as stored in db. */\n  id: number;\n\n  /** Timestamp in milliseconds since beginning of UNIX epoch. */\n  timestamp: number;\n\n  /** Log level */\n  level: BackgroundGeolocationLogLevel;\n\n  /** Log message */\n  message: string;\n\n  /** Recorded stacktrace. (Android only, on iOS part of message) */\n  stackTrace: string;\n}\n\nexport interface ServiceStatus {\n  /** TRUE if service is running. */\n  isRunning: boolean;\n\n  /** TRUE if location services are enabled */\n  locationServicesEnabled: boolean;\n\n  /**\n   * Authorization status.\n   *\n   * Posible values:\n   *  NOT_AUTHORIZED, AUTHORIZED, AUTHORIZED_FOREGROUND\n   *\n   * @example\n   * if (authorization == BackgroundGeolocation.NOT_AUTHORIZED) {...}\n   */\n  authorization: BackgroundGeolocationAuthorizationStatus;\n}\n\nexport interface BackgroundGeolocation {\n  code: BackgroundGeolocationLocationCode;\n  message: string;\n}\n\nexport interface BackgroundGeolocationCurrentPositionConfig {\n  timeout: number;\n  maximumAge: number;\n  enableHighAccuracy: boolean;\n}\n\nexport interface BackgroundGeolocationResponse {\n  /** ID of location as stored in DB (or null) */\n  id: number;\n\n  /**\n   * Native provider reponsible for location.\n   *\n   * Possible values:\n   * \"gps\", \"network\", \"passive\" or \"fused\"\n   */\n  provider: BackgroundGeolocationNativeProvider;\n\n  /** Configured location provider. */\n  locationProvider: BackgroundGeolocationLocationProvider;\n\n  /** UTC time of this fix, in milliseconds since January 1, 1970. */\n  time: number;\n\n  /** Latitude, in degrees. */\n  latitude: number;\n\n  /** Longitude, in degrees. */\n  longitude: number;\n\n  /** Estimated accuracy of this location, in meters. */\n  accuracy: number;\n\n  /**\n   * Speed if it is available, in meters/second over ground.\n   *\n   * Note: Not all providers are capable of providing speed.\n   * Typically network providers are not able to do so.\n   */\n  speed: number;\n\n  /** Altitude if available, in meters above the WGS 84 reference ellipsoid. */\n  altitude: number;\n\n  /** Bearing, in degrees. */\n  bearing: number;\n\n  /**\n   * True if location was recorded by mock provider. (ANDROID ONLY)\n   *\n   * Note: this property is not enabled by default!\n   * You can enable it \"postTemplate\" configure option.\n   */\n  isFromMockProvider?: boolean;\n\n  /**\n   * True if device has mock locations enabled. (ANDROID ONLY)\n   *\n   * Note: this property is not enabled by default!\n   * You can enable it \"postTemplate\" configure option.\n   */\n  mockLocationsEnabled?: boolean;\n}\n\nexport interface BackgroundGeolocationConfig {\n  /**\n   * Set location provider\n   *\n   * Platform: all\n   * Available providers:\n   *  DISTANCE_FILTER_PROVIDER,\n   *  ACTIVITY_PROVIDER\n   *  RAW_PROVIDER\n   *\n   * @default DISTANCE_FILTER_PROVIDER\n   * @example\n   * { locationProvider: LocationProvider.RAW_PROVIDER }\n   */\n  locationProvider?: number;\n\n  /**\n   * Desired accuracy in meters.\n   *\n   * Platform: all\n   * Provider: all\n   * Possible values:\n   *  HIGH_ACCURACY,\n   *  MEDIUM_ACCURACY,\n   *  LOW_ACCURACY,\n   *  PASSIVE_ACCURACY\n   * Note: Accuracy has direct effect on power drain. Lower accuracy = lower power drain.\n   *\n   * @default MEDIUM_ACCURACY\n   * @example\n   * { desiredAccuracy: BackgroundGeolocationAccuracy.LOW }\n   */\n  desiredAccuracy?: number;\n\n  /**\n   * Stationary radius in meters.\n   *\n   * When stopped, the minimum distance the device must move beyond the stationary location for aggressive background-tracking to engage.\n   * Platform: all\n   * Provider: DISTANCE_FILTER\n   *\n   * @default 50\n   */\n  stationaryRadius?: number;\n\n  /**\n   * When enabled, the plugin will emit sounds for life-cycle events of background-geolocation! See debugging sounds table.\n   *\n   * Platform: all\n   * Provider: all\n   *\n   * @default false\n   */\n  debug?: boolean;\n\n  /**\n   * The minimum distance (measured in meters) a device must move horizontally before an update event is generated.\n   *\n   * Platform: all\n   * Provider: DISTANCE_FILTER, RAW\n   *\n   * @default 500\n   * @see {@link https://apple.co/2oHo2CV|Apple docs}\n   */\n  distanceFilter?: number;\n\n  /**\n   * Enable this in order to force a stop() when the application terminated.\n   * E.g. on iOS, double-tap home button, swipe away the app.\n   *\n   * Platform: all\n   * Provider: all\n   *\n   * @default true\n   */\n  stopOnTerminate?: boolean;\n\n  /**\n   * Start background service on device boot.\n   *\n   * Platform: Android\n   * Provider: all\n   *\n   * @default false\n   */\n  startOnBoot?: boolean;\n\n  /**\n   * The minimum time interval between location updates in milliseconds.\n   *\n   * Platform: Android\n   * Provider: all\n   *\n   * @default 60000\n   * @see {@link https://bit.ly/1x00RUu|Android docs}\n   */\n  interval?: number;\n\n  /**\n   * Fastest rate in milliseconds at which your app can handle location updates.\n   *\n   * Platform: Android\n   * Provider: ACTIVITY\n   *\n   * @default 120000\n   * @see {@link https://bit.ly/1x00RUu|Android docs}\n   */\n  fastestInterval?: number;\n\n  /**\n   * Rate in milliseconds at which activity recognition occurs.\n   * Larger values will result in fewer activity detections while improving battery life.\n   *\n   * Platform: Android\n   * Provider: ACTIVITY\n   *\n   * @default 10000\n   */\n  activitiesInterval?: number;\n\n  /**\n   * @deprecated Stop location updates, when the STILL activity is detected.\n   */\n  stopOnStillActivity?: boolean;\n\n  /**\n   * Enable/disable local notifications when tracking and syncing locations.\n   *\n   * Platform: Android\n   * Provider: all\n   *\n   * @default true\n   */\n  notificationsEnabled?: boolean;\n\n  /**\n   * Allow location sync service to run in foreground state.\n   * Foreground state also requires a notification to be presented to the user.\n   *\n   * Platform: Android\n   * Provider: all\n   *\n   * @default false\n   */\n  startForeground?: boolean;\n\n  /**\n   * Custom notification title in the drawer.\n   *\n   * Platform: Android\n   * Provider: all\n   * @default \"Background tracking\"\n   */\n  notificationTitle?: string;\n\n  /**\n   * Custom notification text in the drawer.\n   *\n   * Platform: Android\n   * Provider: all\n   *\n   * @default \"ENABLED\"\n   */\n  notificationText?: string;\n\n  /**\n   * The accent color (hex triplet) to use for notification.\n   * Eg. <code>#4CAF50</code>.\n   *\n   * Platform: Android\n   * Provider: all\n   */\n  notificationIconColor?: string;\n\n  /**\n   * The filename of a custom notification icon.\n   *\n   * Platform: Android\n   * Provider: all\n   */\n  notificationIconLarge?: string;\n\n  /**\n   * The filename of a custom notification icon.\n   *\n   * Platform: Android\n   * Provider: all\n   */\n  notificationIconSmall?: string;\n\n  /**\n   * Activity type.\n   * Presumably, this affects iOS GPS algorithm.\n   *\n   * Possible values:\n   * \"AutomotiveNavigation\", \"OtherNavigation\", \"Fitness\", \"Other\"\n   *\n   * Platform: iOS\n   * Provider: all\n   *\n   * @default \"OtherNavigation\"\n   * @see {@link https://apple.co/2oHofpH|Apple docs}\n   */\n  activityType?: string;\n\n  /**\n   * Pauses location updates when app is paused.\n   *\n   * Platform: iOS\n   * Provider: all\n   *\n   * @default false\n   * @see {@link https://apple.co/2CbjEW2|Apple docs}\n   */\n  pauseLocationUpdates?: boolean;\n\n  /**\n   * Switch to less accurate significant changes and region monitory when in background.\n   *\n   * Platform: iOS\n   * Provider: all\n   *\n   * @default false\n   */\n  saveBatteryOnBackground?: boolean;\n\n  /**\n   * Server url where to send HTTP POST with recorded locations\n   *\n   * Platform: all\n   * Provider: all\n   */\n  url?: string;\n\n  /**\n   * Server url where to send fail to post locations\n   *\n   * Platform: all\n   * Provider: all\n   */\n  syncUrl?: string;\n\n  /**\n   * Specifies how many previously failed locations will be sent to server at once.\n   *\n   * Platform: all\n   * Provider: all\n   *\n   * @default 100\n   */\n  syncThreshold?: string;\n\n  /**\n   * Optional HTTP headers sent along in HTTP request.\n   *\n   * Platform: all\n   * Provider: all\n   */\n  httpHeaders?: any;\n\n  /**\n   * Limit maximum number of locations stored into db.\n   *\n   * Platform: all\n   * Provider: all\n   *\n   * @default 10000\n   */\n  maxLocations?: number;\n\n  /**\n   * Customization post template.\n   *\n   * Platform: all\n   * Provider: all\n   */\n  postTemplate?: any;\n}\n\n/**\n * Set location service provider @see https://github.com/mauron85/cordova-plugin-background-geolocation/wiki/Android-providers\n *\n * Possible values:\n *  ANDROID_DISTANCE_FILTER_PROVIDER: 0,\n *  ANDROID_ACTIVITY_PROVIDER: 1\n *\n * @enum {number}\n */\nexport declare enum BackgroundGeolocationProvider {\n  ANDROID_DISTANCE_FILTER_PROVIDER = 0,\n  ANDROID_ACTIVITY_PROVIDER = 1\n}\n\n/**\n * Desired accuracy in meters. Possible values [0, 10, 100, 1000].\n * The lower the number, the more power devoted to GeoLocation resulting in higher accuracy readings.\n * 1000 results in lowest power drain and least accurate readings.\n *\n * Possible values:\n *  HIGH: 0\n *  MEDIUM: 10\n *  LOW: 100\n *  PASSIVE: 1000\n *\n * enum {number}\n */\nexport declare enum BackgroundGeolocationAccuracy {\n  HIGH = 0,\n  MEDIUM = 10,\n  LOW = 100,\n  PASSIVE = 1000\n}\n\n/**\n * Used in the switchMode function\n *\n * Possible values:\n *  BACKGROUND: 0\n *  FOREGROUND: 1\n *\n * @enum {number}\n */\nexport declare enum BackgroundGeolocationMode {\n  BACKGROUND = 0,\n  FOREGROUND = 1\n}\n\nexport declare enum BackgroundGeolocationIOSActivity {\n  AutomotiveNavigation = 'AutomotiveNavigation',\n  OtherNavigation = 'OtherNavigation',\n  Fitness = 'Fitness',\n  Other = 'Other'\n}\n\n/**\n * @name Background Geolocation\n * @description\n * This plugin provides foreground and background geolocation with battery-saving \"circular region monitoring\" and \"stop detection\". For\n * more detail, please see https://github.com/mauron85/cordova-plugin-background-geolocation\n *\n * @usage\n *\n * BackgroundGeolocation must be called within app.ts and or before Geolocation. Otherwise the platform will not ask you for background tracking permission.\n *\n * ```typescript\n * import { BackgroundGeolocation, BackgroundGeolocationConfig, BackgroundGeolocationResponse } from '@ionic-native/background-geolocation';\n *\n * constructor(private backgroundGeolocation: BackgroundGeolocation) { }\n *\n * ...\n *\n * const config: BackgroundGeolocationConfig = {\n *             desiredAccuracy: 10,\n *             stationaryRadius: 20,\n *             distanceFilter: 30,\n *             debug: true, //  enable this hear sounds for background-geolocation life-cycle.\n *             stopOnTerminate: false, // enable this to clear background location settings when the app terminates\n *     };\n *\n * this.backgroundGeolocation.configure(config)\n *   .subscribe((location: BackgroundGeolocationResponse) => {\n *\n *     console.log(location);\n *\n *     // IMPORTANT:  You must execute the finish method here to inform the native plugin that you're finished,\n *     // and the background-task may be completed.  You must do this regardless if your HTTP request is successful or not.\n *     // IF YOU DON'T, ios will CRASH YOUR APP for spending too much time in the background.\n *     this.backgroundGeolocation.finish(); // FOR IOS ONLY\n *\n *   });\n *\n * // start recording location\n * this.backgroundGeolocation.start();\n *\n * // If you wish to turn OFF background-tracking, call the #stop method.\n * this.backgroundGeolocation.stop();\n *\n * ```\n * @interfaces\n * BackgroundGeolocationResponse\n * BackgroundGeolocationConfig\n */\n@Plugin({\n  pluginName: 'BackgroundGeolocation',\n  plugin: 'cordova-plugin-mauron85-background-geolocation@alpha',\n  pluginRef: 'BackgroundGeolocation',\n  repo: 'https://github.com/mauron85/cordova-plugin-background-geolocation',\n  platforms: ['Android', 'iOS']\n})\n@Injectable()\nexport class BackgroundGeolocation extends IonicNativePlugin {\n  /**\n   * Configure the plugin.\n   *\n   * @param options {BackgroundGeolocationConfig} options An object of type Config\n   * @return {Observable<BackgroundGeolocationResponse>}\n   */\n  @Cordova()\n  configure(options: BackgroundGeolocationConfig): Promise<any> {\n    return;\n  }\n\n  /**\n   * Turn ON the background-geolocation system.\n   * The user will be tracked whenever they suspend the app.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  start(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Turn OFF background-tracking\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  stop(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Inform the native plugin that you're finished, the background-task may be completed\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  finish(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Force the plugin to enter \"moving\" or \"stationary\" state\n   * @param isMoving {boolean}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  changePace(isMoving: boolean): Promise<any> {\n    return;\n  }\n\n  /**\n   * Setup configuration\n   * @param options {BackgroundGeolocationConfig}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  setConfig(options: BackgroundGeolocationConfig): Promise<any> {\n    return;\n  }\n\n  /**\n   * Returns current stationaryLocation if available. null if not\n   * @returns {Promise<Location>}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  getStationaryLocation(): Promise<BackgroundGeolocationResponse> {\n    return;\n  }\n\n  /**\n   * Add a stationary-region listener. Whenever the devices enters \"stationary-mode\",\n   * your #success callback will be executed with #location param containing #radius of region\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  onStationary(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Check if location is enabled on the device\n   * @returns {Promise<number>} Returns a promise with int argument that takes values 0, 1 (true).\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  isLocationEnabled(): Promise<number> {\n    return;\n  }\n\n  /**\n   * Display app settings to change permissions\n   */\n  @Cordova({ sync: true })\n  showAppSettings(): void {}\n\n  /**\n   * Display device location settings\n   */\n  @Cordova({ sync: true })\n  showLocationSettings(): void {}\n\n  /**\n   * Method can be used to detect user changes in location services settings.\n   * If user enable or disable location services then success callback will be executed.\n   * In case or  (SettingNotFoundException) fail callback will be executed.\n   * @returns {Observable<number>}\n   */\n  @Cordova({\n    platforms: ['Android'],\n    observable: true\n  })\n  watchLocationMode(): Observable<number> {\n    return;\n  }\n\n  /**\n   * Stop watching for location mode changes.\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  stopWatchingLocationMode(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Method will return all stored locations.\n   * Locations are stored when:\n   *  - config.stopOnTerminate is false and main activity was killed\n   *    by the system\n   *  or\n   *  - option.debug is true\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  getLocations(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Method will return locations, which has not been yet posted to server. NOTE: Locations does contain locationId.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  getValidLocations(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Delete stored location by given locationId.\n   * @param locationId {number}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  deleteLocation(locationId: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Delete all stored locations.\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['Android']\n  })\n  deleteAllLocations(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Normally plugin will handle switching between BACKGROUND and FOREGROUND mode itself.\n   * Calling switchMode you can override plugin behavior and force plugin to switch into other mode.\n   *\n   * In FOREGROUND mode plugin uses iOS local manager to receive locations and behavior is affected by option.desiredAccuracy and option.distanceFilter.\n   * In BACKGROUND mode plugin uses significant changes and region monitoring to receive locations and uses option.stationaryRadius only.\n   *\n   * BackgroundGeolocation.Mode.FOREGROUND\n   * BackgroundGeolocation.Mode.BACKGROUND\n   *\n   * @param modeId {number}\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  switchMode(modeId: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * Return all logged events. Useful for plugin debugging. Parameter limit limits number of returned entries.\n   * @see https://github.com/mauron85/cordova-plugin-background-geolocation/tree/v2.2.1#debugging for more information.\n   *\n   * @param limit {number} Limits the number of entries\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  getLogEntries(\n    limit: number,\n    fromId: number,\n    minLevel: BackgroundGeolocationLogLevel\n  ): Promise<BackgroundGeolocationLogEntry[]> {\n    return;\n  }\n\n  /**\n   * Return all logged events. Useful for plugin debugging. Parameter limit limits number of returned entries.\n   * @see https://github.com/mauron85/cordova-plugin-background-geolocation/tree/v2.2.1#debugging for more information.\n   *\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  getConfig(): Promise<any> {\n    return;\n  }\n\n  /**\n   * One time location check to get current location of the device.\n   * {timeout: Maximum time in milliseconds device will wait for location,\n   * maximumAge: Maximum age in milliseconds of a possible cached location that is acceptable to return;\n   * enableHighAccuracy: if true and if the device is able to provide a more accurate position, it will do so}\n   *\n   * @param {BackgroundGeolocationCurrentPositionConfig} options\n   * @returns {Promise<any>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse'\n  })\n  getCurrentLocation(\n    options?: BackgroundGeolocationCurrentPositionConfig\n  ): Promise<BackgroundGeolocationResponse> {\n    return;\n  }\n\n  /**\n   * Check status of the service\n   */\n  @Cordova()\n  checkStatus(): Promise<ServiceStatus> {\n    return;\n  }\n\n  /**\n   * Start background task (iOS only)\n   *\n   * To perform any long running operation on iOS\n   * you need to create background task\n   * IMPORTANT: task has to be ended by endTask\n   *\n   * @returns {Promise<number>} taskKey\n   */\n  @Cordova({\n    platforms: ['IOS']\n  })\n  startTask(): Promise<number> {\n    return;\n  }\n\n  /**\n   *  End background task indentified by taskKey (iOS only)\n   */\n  @Cordova({\n    platforms: ['IOS']\n  })\n  endTask(taskKey: number): Promise<any> {\n    return;\n  }\n\n  /**\n   * A special task that gets executed when the app is terminated, but\n   * the plugin was configured to continue running in the background\n   * (option <code>stopOnTerminate: false</code>).\n   *\n   * In this scenario the Activity was killed by the system and all registered\n   * event listeners will not be triggered until the app is relaunched.\n   *\n   * @example\n   *  BackgroundGeolocation.headlessTask(function(event) {\n   *\n   *      if (event.name === 'location' || event.name === 'stationary') {\n   *          var xhr = new XMLHttpRequest();\n   *          xhr.open('POST', 'http://192.168.81.14:3000/headless');\n   *          xhr.setRequestHeader('Content-Type', 'application/json');\n   *          xhr.send(JSON.stringify(event.params));\n   *      }\n   *\n   *      return 'Processing event: ' + event.name; // will be logged\n   *  });\n   * @param func\n   */\n  @Cordova()\n  headlessTask(func: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Force sync of pending locations.\n   * Option <code>syncThreshold</code> will be ignored and all pending locations will be immediately posted to <code>syncUrl</code> in single batch.\n   *\n   * Platform: Android, iOS\n   */\n  @Cordova()\n  forceSync(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Register event listener.\n   *\n   * Triggered when server responded with \"<code>285 Updates Not Required</code>\" to post/sync request.\n   * @param event\n   * @param callbackFn\n   */\n  @Cordova({\n    observable: true\n  })\n  on(event: BackgroundGeolocationEvents): Observable<BackgroundGeolocationResponse> {\n    return;\n  }\n\n  /**\n   * Unregister all event listeners for given event.\n   *\n   * If parameter <code>event</code> is not provided then all event listeners will be removed.\n   */\n  @Cordova()\n  removeAllListeners(event?: BackgroundGeolocationEvents): Promise<any> {\n    return;\n  }\n}\n"]}